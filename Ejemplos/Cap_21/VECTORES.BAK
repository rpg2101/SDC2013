Pila    segment stack 'stack'
        db 256 dup (?)  
  FinPila:              
Pila    ends
                                  

Datos   segment 'data'
  MsgVector   db 'El vector '
    NumVector db '     $'
    
  MsgLibre db 'está libre.', 13, 10, '$'
  MsgNoLibre db 'no está libre.', 13, 10, '$'
       
Datos   ends

Codigo  segment 'code'
        assume CS:Codigo, DS:Datos, SS:Pila

Main:
        mov ax, seg Pila
        mov ss, ax
        mov sp, FinPila

        mov ax, seg Datos
        mov ds, ax                   
        mov es, ax
        
        mov cx, 128
Bucle:
        mov ax, 256
        sub ax, cx

        mov di, offset NumVector+3
        call EnteroCadena
        
        mov dx, offset MsgVector
        mov ah, 9
        int 21h
        
        push es
        
        mov ah, 35h
        int 21h
        
        or bx, bx
        jnz Ocupado
        
        mov bx, es
        or bx, bx
        jnz Ocupado
         
        mov dx, offset MsgLibre
        jmp Notifica
        
Ocupado:
        mov dx, offset MsgNoLibre                
        
Notifica:
        mov ah, 9
        int 21h
        
        pop es
        
        loop Bucle
        
        mov     ah, 4Ch                
        int     21h

;-----------------------------
; Este procedimiento convierte
; el valor de AX en una cadena
; de hasta cinco caracteres
; 
; Entrada: AX = número a convertir
;          ES:DI = destino cadena
;-----------------------------
EnteroCadena:
        ; DX debe estar a cero
        push dx ; lo guardamos
        xor dx, dx
        
        ; establecemos valor inicial
        mov byte ptr [di], '0'
        
        ; comprobamos si AL es cero
        or ax, ax
        ; de ser así, no hay más
        ; que hacer
        jz FinConversion

        push bx ; guardamos bx
        ; y establecemos el divisor
        mov bx, 10        
        
 Bucle0:
        ; vamos dividiendo por 10
        div bx 
        
        ; quedándonos con el resto
        ; que convertimos a ASCII
        add dl, '0'
        ; y guardamos
        mov byte ptr [di], dl
        ; retrocediendo al dígito anterior
        dec di
        
        ; eliminamos el contenido
        ; de DX para quedarnos con
        ; el cociente de AX
        xor dx, dx
        
        ; si el cociente es mayor que 9
        cmp ax, 9
        ; seguimos dividiendo
        ja Bucle0
        
        ; en caso contrario guardamos
        add al, '0'
        mov byte ptr [di], al
        
        pop bx ; recuperamos BX
        
FinConversion:
        pop dx ; recuperamos DX
        ret


Codigo  ends

        end Main

